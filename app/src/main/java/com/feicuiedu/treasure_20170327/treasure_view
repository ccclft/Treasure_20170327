20170327
1. AS和Git
2. Butterknife
    添加依赖：两句
    绑定视图、资源、设置监听
3. 主页面搭建：
    主要的是视频播放
4. 主页面分别实现了登录注册的跳转和布局搭建(Toolbar展示)
任务：
主页面搭建
登录和注册的搭建、Toolbar的展示
明天：
MVP

20170328
1. 登录注册页面布局搭建和视图的处理
2. 登录和注册模拟场景进行
3. MVP项目架构方式

MVC：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：布局（视图）
Controller：Activity、Fragment等

能不能将视图和业务分离？视图和业务模块独立

MVP：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：视图、用户界面：Activity、Fragment、自定义的视图
Presenter：交互中间人，View通知P来进行数据的获取，拿到数据之后
    要把数据给View，数据和视图沟通的桥梁。

使用：
Model：数据
View：视图
Presenter：业务类
View Interface：视图接口，主要是为了处理业务过程中涉及到的视图的操作
    Activity实现这个视图接口，实现具体的视图方法

总结：
登录注册的场景实现：
1. 自定义一个对话框
2. MVP：业务和视图分离、
        解耦：降低耦合度，每一个模块互相独立
        维护性、结构更加清晰
任务：
一定要理清MVP的使用
完成登录和注册的实现。
明天：
网络Retrofit。

20170329
1. http基本知识点
2. OkHttp
3. Retrofit

请求和响应的过程分析：
请求：
1. 创建一个客户端
2. 构建一个请求：根据接口文档里面的接口进行构建
    请求的url、请求方式、请求头、请求体等
3. 客户端去发送请求

响应：
1. 响应码：一般根据响应码判断响应有没有成功
2. 获取响应头信息、响应体信息
3. 一般处理响应体信息：Json字符串，通过Json解析拿到实际的数据
    解析：Gson来实现数据的解析

OkHttp进行网络请求：
1. 添加依赖
2. 构建了Get请求
3. OkHttpClient进行单例化
4. Call: 请求和响应做管理。
    构建：okHttpClient.newCall(request);
    执行：execute(),enqueue();
    取消: call.cancel(), 是可以在任意的线程取消的
5. 功能：拦截器，把请求和响应的过程可以进行拦截
    设置给客户端的：OkHttpClient
    1. 可以自定义：继承自Intercept
    2. 提供一个日志拦截器：主要是为了帮我们打印请求和响应的信息
  日志拦截器：HttpLoggingInterceptor
  1. 添加依赖：
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
  2. 设置给OkHttpClient

总结：
1. http基本的知识：
    了解消息的结构
2. OkHttp的使用
    使用的流程、优化
    Call模型的概念
    拦截器：日志拦截器
任务：OkHttp的知识
明天：
Post请求
Retrofit


20170330:
Post请求的构建、用OkHttp完善登录的效果
Retrofit网络框架的讲解。

Retrofit
1. 添加依赖
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
2. 创建和使用
    1. 创建Retrofit
        mRetrofit = new Retrofit.Builder()
                        .baseUrl(BASE_URL)// 必须要加的BASEURL
                        .client(mOkHttpClient)// 添加OkHttpClient
                        .build();
    2. 构建请求：创建一个接口，方便对应服务器接口，最后通过Retrofit的create实现
    3. 请求接口实现：mRetrofit.create(TreasureApi.class);

3. 转换器：
    GSON转换器：Json--实体类之间进行自动的转换
    1. 添加依赖：
    2. 给Retrofit设置
    3. 替换需要转换的内容：请求体和响应体

总结：
Retrofit
任务：
流程、注解多多理解、转换器
登录实现
明天：
其他的请求
Home页面的搭建：侧滑和侧滑菜单
百度地图的集成

20170331：
1. Retrofit的其他的请求
2. 注册的实现
3. 侧滑
    处理侧滑：图标
    侧滑菜单项的选择处理
    侧滑的视图处理：头像的展示
    登录之后直接到Home
4. Home页面实现地图相关
5. 地图的集成和展示
    1. 了解
    2. cmd--keytool命令是不是可以实现
        keytool命令是JDK的一个证书管理工具，路径在JDK安装路径bin目录下
        解决：http://blog.csdn.net/csdnhejingzhou/article/details/50643246

总结：
1. Retrofit的使用
2. 登录和注册实现
3. Home页面：布局的搭建、侧滑
4. 地图的介绍

任务：
功能处理：Home页面
准备：了解百度地图
      注册一个账号
      keytool命令的问题
      Demo的下载
明天：百度地图的集成和使用

20170401:

1. 获取appkey：官网上申请秘钥：签名文件SHA1 + 包名

    SHA1值：debug.keystore签名文件获取的

    1. 使用我们电脑里面的debug.keystore:在其他电脑上运行key会验证出错
        cd .android
        keytool -list -v -keystore debug.keystore
        输入口令：android，注意：他不会显示，直接输完回车就可以了
        SHA1值

    2. 自己在项目里面放置一个debug.keystore
        debug.keystore放置在app下面，要在build.gradle里面声明
        声明方式：signingConfigs {
                     // your debug keystore
                     debug{
                         storeFile file("debug.keystore")
                     }
                 }

        cmd
        cd F:\BaiduMapsApiASDemo\app
        keytool -list -v -keystore debug.keystore

        AS直接查看：
        Gradle--->app模块里面的signingReport

    3. keytool命令不能使用：不是内部或外部的命令
        keytool.exe在jdk的安装路径bin目录下
        cd C:\Program Files\Java\jdk1.8.0_77\bin（keytool所在的路径）
        debug的keystore要写成绝对路径。
        keytool -list -v -keystore C:\Users\123\.android\debug.keystore

2. key的验证问题：
    1 内部错误，不是我们的问题
    230 key申请的有问题：SHA1值、包名是否正确。








