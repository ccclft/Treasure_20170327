20170327
1. AS和Git
2. Butterknife
    添加依赖：两句
    绑定视图、资源、设置监听
3. 主页面搭建：
    主要的是视频播放
4. 主页面分别实现了登录注册的跳转和布局搭建(Toolbar展示)
任务：
主页面搭建
登录和注册的搭建、Toolbar的展示
明天：
MVP

20170328
1. 登录注册页面布局搭建和视图的处理
2. 登录和注册模拟场景进行
3. MVP项目架构方式

MVC：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：布局（视图）
Controller：Activity、Fragment等

能不能将视图和业务分离？视图和业务模块独立

MVP：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：视图、用户界面：Activity、Fragment、自定义的视图
Presenter：交互中间人，View通知P来进行数据的获取，拿到数据之后
    要把数据给View，数据和视图沟通的桥梁。

使用：
Model：数据
View：视图
Presenter：业务类
View Interface：视图接口，主要是为了处理业务过程中涉及到的视图的操作
    Activity实现这个视图接口，实现具体的视图方法

总结：
登录注册的场景实现：
1. 自定义一个对话框
2. MVP：业务和视图分离、
        解耦：降低耦合度，每一个模块互相独立
        维护性、结构更加清晰
任务：
一定要理清MVP的使用
完成登录和注册的实现。
明天：
网络Retrofit。

20170329
1. http基本知识点
2. OkHttp
3. Retrofit

请求和响应的过程分析：
请求：
1. 创建一个客户端
2. 构建一个请求：根据接口文档里面的接口进行构建
    请求的url、请求方式、请求头、请求体等
3. 客户端去发送请求

响应：
1. 响应码：一般根据响应码判断响应有没有成功
2. 获取响应头信息、响应体信息
3. 一般处理响应体信息：Json字符串，通过Json解析拿到实际的数据
    解析：Gson来实现数据的解析

OkHttp进行网络请求：
1. 添加依赖
2. 构建了Get请求
3. OkHttpClient进行单例化
4. Call: 请求和响应做管理。
    构建：okHttpClient.newCall(request);
    执行：execute(),enqueue();
    取消: call.cancel(), 是可以在任意的线程取消的
5. 功能：拦截器，把请求和响应的过程可以进行拦截
    设置给客户端的：OkHttpClient
    1. 可以自定义：继承自Intercept
    2. 提供一个日志拦截器：主要是为了帮我们打印请求和响应的信息
  日志拦截器：HttpLoggingInterceptor
  1. 添加依赖：
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
  2. 设置给OkHttpClient

总结：
1. http基本的知识：
    了解消息的结构
2. OkHttp的使用
    使用的流程、优化
    Call模型的概念
    拦截器：日志拦截器
任务：OkHttp的知识
明天：
Post请求
Retrofit

20170330:
Post请求的构建、用OkHttp完善登录的效果
Retrofit网络框架的讲解。

Retrofit
1. 添加依赖













